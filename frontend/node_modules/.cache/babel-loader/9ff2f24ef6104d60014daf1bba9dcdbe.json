{"ast":null,"code":"var _jsxFileName = \"/home/akbar/Documents/eventBook/frontend/eventbooking/src/container/Event/makeEvent.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Datepicker from 'react-multiple-datepicker';\nimport { Button, Col, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row } from 'reactstrap';\nimport axios from 'axios';\nimport { API_SERVER, CREATE_EVENT, ALL_USERS } from '../../api';\nimport { toast } from 'react-toastify';\nimport jwtSimple from 'jwt-simple';\nimport { actionGetVendorList } from '../../actions';\n\nclass _createEvent extends Component {\n  constructor(props) {\n    super(props);\n    this.submitEvent = this.submitEvent.bind(this);\n    this.getAllVendor = this.getAllVendor.bind(this);\n    this.state = {\n      eventName: '',\n      vendorId: '',\n      companyId: jwtSimple.decode(localStorage.getItem('token'), \"SECRET\")._id,\n      proposedDate: [],\n      proposedLocation: ''\n    };\n    this.adminType = jwtSimple.decode(localStorage.getItem('token'), \"SECRET\").adminType;\n  }\n\n  componentWillMount() {\n    this.getAllVendor();\n  }\n\n  submitEvent(e) {\n    e.preventDefault();\n    axios.post(API_SERVER + CREATE_EVENT, this.state, {\n      headers: {\n        Authorization: localStorage.getItem('token')\n      }\n    }).then(response => {\n      var result = response.data;\n      console.log(result);\n\n      if (!result.error) {\n        window.location.href = '/event';\n        toast.success(result.message);\n        console.log(result);\n      } else {\n        alert.error(result.error);\n      }\n    }).catch(error => {\n      alert.error(error);\n    });\n  }\n\n  getAllVendor() {\n    axios.get(API_SERVER + ALL_USERS + \"?adminType=\".concat(this.adminType), {\n      headers: {\n        Authorization: localStorage.getItem('token')\n      }\n    }).then(response => {\n      var result = response.data;\n\n      if (!result.error) {\n        console.log(result);\n        this.props.setVendorList(result.data);\n      }\n    }).catch(error => {});\n  }\n\n  render() {\n    console.log(this.state);\n    console.log(this.props.vendors);\n    return React.createElement(Form, {\n      className: \"LoginForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Create Event Form\"), React.createElement(\"p\", {\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Fill out this form about your event details\"), React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(InputGroupAddon, {\n      addonType: \"prepend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(InputGroupText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }))), React.createElement(Input, {\n      type: \"text\",\n      placeholder: \"Event Name\",\n      autoComplete: \"eventname\",\n      value: this.state.eventName,\n      onChange: val => {\n        this.setState({\n          eventName: val.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(InputGroupAddon, {\n      addonType: \"prepend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(InputGroupText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }))), React.createElement(Input, {\n      type: \"select\",\n      placeholder: \"Vendor Name\",\n      autoComplete: \"Vendor Name\",\n      onClick: val => {\n        this.setState({\n          vendorId: val.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Choose Vendor\"), this.props.vendors[0] ? this.props.vendors.map((vendors, key) => React.createElement(\"option\", {\n      key: key,\n      value: vendors._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, vendors.username)) : null)), React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(InputGroupAddon, {\n      addonType: \"prepend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(InputGroupText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }))), React.createElement(Datepicker, {\n      placeholder: \"Select 3 of Proposed Date\",\n      onSubmit: dates => this.setState({\n        proposedDate: dates\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(InputGroupAddon, {\n      addonType: \"prepend\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(InputGroupText, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))), React.createElement(Input, {\n      type: \"text\",\n      placeholder: \"Proposed Location\",\n      autoComplete: \"proposedlocation\",\n      value: this.state.proposedLocation,\n      onChange: val => {\n        this.setState({\n          proposedLocation: val.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Col, {\n      xs: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      className: \"px-4 text-white\",\n      type: \"submit\",\n      onClick: this.submitEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"submit\"))));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  vendors: state.user.vendor\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setVendorList: data => dispatch(actionGetVendorList(data))\n});\n\nexport const createEvent = connect(mapStateToProps, mapDispatchToProps)(_createEvent);\nexport default createEvent;","map":{"version":3,"sources":["/home/akbar/Documents/eventBook/frontend/eventbooking/src/container/Event/makeEvent.js"],"names":["React","Component","connect","Datepicker","Button","Col","Form","Input","InputGroup","InputGroupAddon","InputGroupText","Row","axios","API_SERVER","CREATE_EVENT","ALL_USERS","toast","jwtSimple","actionGetVendorList","_createEvent","constructor","props","submitEvent","bind","getAllVendor","state","eventName","vendorId","companyId","decode","localStorage","getItem","_id","proposedDate","proposedLocation","adminType","componentWillMount","e","preventDefault","post","headers","Authorization","then","response","result","data","console","log","error","window","location","href","success","message","alert","catch","get","setVendorList","render","vendors","val","setState","target","value","map","key","username","dates","mapStateToProps","ownProps","user","vendor","mapDispatchToProps","dispatch","createEvent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Datepicker from 'react-multiple-datepicker'\nimport {\n  Button,\n  Col,\n  Form,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Row\n} from 'reactstrap';\nimport axios from 'axios';\nimport { API_SERVER, CREATE_EVENT, ALL_USERS  } from '../../api'\nimport { toast } from 'react-toastify'\nimport jwtSimple from 'jwt-simple'\nimport { actionGetVendorList } from '../../actions'\n\nclass _createEvent extends Component {\n    constructor(props){\n        super(props)\n        this.submitEvent = this.submitEvent.bind(this)\n        this.getAllVendor = this.getAllVendor.bind(this)\n        this.state = {\n            eventName: '',\n            vendorId: '',\n            companyId: jwtSimple.decode(localStorage.getItem('token'), \"SECRET\")._id,\n            proposedDate: [],\n            proposedLocation: '',\n        }\n        this.adminType = jwtSimple.decode(localStorage.getItem('token'), \"SECRET\").adminType\n    }\n\n    componentWillMount(){\n      this.getAllVendor()\n    }\n\n    submitEvent(e){\n      e.preventDefault()\n      axios\n        .post(API_SERVER + CREATE_EVENT, this.state, {\n          headers: {\n            Authorization: localStorage.getItem('token')\n          }\n        }).then(response => {\n          var result = response.data\n          console.log(result)\n          if (!result.error) {\n            window.location.href = '/event'\n            toast.success(result.message)\n            console.log(result)\n          } else {\n            alert.error(result.error)\n          }\n        }).catch(error => {\n          alert.error(error)\n        })\n    }\n\n    getAllVendor(){\n      axios\n        .get(API_SERVER + ALL_USERS + `?adminType=${this.adminType}`, {\n          headers: {\n            Authorization: localStorage.getItem('token')\n          }\n        }).then(response => {\n          var result = response.data\n          if (!result.error) {\n            console.log(result)\n            this.props.setVendorList(result.data)\n          }\n        }).catch(error => {\n          \n        })\n    }\n\n    render(){\n        console.log(this.state)\n        console.log(this.props.vendors)\n        return(\n            <Form className=\"LoginForm\">\n                <h1>Create Event Form</h1>\n                <p className=\"text-muted\">Fill out this form about your event details</p>\n                <InputGroup className=\"mb-3\">\n                <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>\n                    <i className=\"icon-user\" />\n                    </InputGroupText>\n                </InputGroupAddon>\n                <Input\n                    type=\"text\"\n                    placeholder=\"Event Name\"\n                    autoComplete=\"eventname\"\n                    value={this.state.eventName}\n                    onChange={val => {\n                    this.setState({\n                        eventName: val.target.value\n                    });\n                    }}\n                />\n                </InputGroup>\n                <InputGroup className=\"mb-3\">\n                <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>\n                    <i className=\"icon-user\" />\n                    </InputGroupText>\n                </InputGroupAddon>\n                <Input\n                    type=\"select\"\n                    placeholder=\"Vendor Name\"\n                    autoComplete=\"Vendor Name\"\n                    onClick={val => {\n                    this.setState({\n                        vendorId: val.target.value\n                    });\n                    }}\n                >\n                <option value=\"\" disabled selected>Choose Vendor</option>\n                {\n                  this.props.vendors[0] ? this.props.vendors.map((vendors, key) => (\n                    <option key={key} value={vendors._id}>{vendors.username}</option>\n                  )) : null\n                }\n                </Input>\n                </InputGroup>\n                <InputGroup className=\"mb-3\">\n                <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>\n                    <i className=\"icon-user\" />\n                    </InputGroupText>\n                </InputGroupAddon>\n                <Datepicker \n                    placeholder=\"Select 3 of Proposed Date\"\n                    onSubmit={dates => this.setState({\n                        proposedDate: dates\n                    })}\n                />\n                </InputGroup>\n                <InputGroup className=\"mb-3\">\n                <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>\n                    <i className=\"icon-user\" />\n                    </InputGroupText>\n                </InputGroupAddon>\n                <Input\n                    type=\"text\"\n                    placeholder=\"Proposed Location\"\n                    autoComplete=\"proposedlocation\"\n                    value={this.state.proposedLocation}\n                    onChange={val => {\n                    this.setState({\n                        proposedLocation: val.target.value\n                    });\n                    }}\n                />\n                </InputGroup>\n                <Row>\n                <Col xs=\"6\">\n                    <Button\n                    color=\"primary\"\n                    className=\"px-4 text-white\"\n                    type=\"submit\"\n                    onClick={this.submitEvent}\n                    >\n                    submit\n                    </Button>\n                </Col>\n                {/* <Col xs=\"6\" className=\"text-right\">\n                            <Button color=\"link\" className=\"px-0\">Forgot password?</Button>\n                        </Col> */}\n                </Row>\n            </Form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  vendors: state.user.vendor\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setVendorList: data => dispatch(actionGetVendorList(data))\n})\n\nexport const createEvent = connect(mapStateToProps, mapDispatchToProps)(_createEvent)\nexport default createEvent"]},"metadata":{},"sourceType":"module"}