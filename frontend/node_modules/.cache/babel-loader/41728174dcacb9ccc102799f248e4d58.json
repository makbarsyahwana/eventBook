{"ast":null,"code":"var _jsxFileName = \"/home/akbar/Documents/eventBook/frontend/eventbooking/src/container/Event/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row, Table, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap';\nimport jwtSimple from 'jwt-simple';\nimport axios from 'axios';\nimport { API_SERVER, READ_EVENT, APPROVAL } from '../../api';\nimport { toast } from 'react-toastify';\nimport { actionGetEventList } from '../../actions';\n\nclass _Event extends Component {\n  constructor(props) {\n    super(props);\n    this.getAllEvent = this.getAllEvent.bind(this);\n    this.actionApproval = this.actionApproval.bind(this);\n    this.credential = jwtSimple.decode(localStorage.getItem('token'), \"SECRET\");\n    this.state = {\n      adminType: this.credential.adminType,\n      // toget admin type account vendor/hr admin\n      accountId: this.credential._id\n    };\n  }\n\n  componentWillMount() {\n    this.getAllEvent();\n  } // toget all event by account type vendor/hr admin\n\n\n  getAllEvent() {\n    axios.get(API_SERVER + READ_EVENT + \"?adminType=\".concat(this.state.adminType, \"&accountId=\").concat(this.state.accountId), {\n      headers: {\n        Authorization: localStorage.getItem('token')\n      }\n    }).then(response => {\n      var result = response.data;\n\n      if (!result.error) {\n        this.props.setEventList(result.data);\n        toast.success(result.message);\n      } else {\n        toast.error(result.message);\n      }\n    }).catch(error => {\n      toast.error(error);\n    });\n  }\n\n  actionApproval(status, eventId) {\n    axios.post(API_SERVER + APPROVAL, {\n      eventId: eventId,\n      status: status\n    }, {\n      headers: {\n        Authorization: localStorage.getItem('token')\n      }\n    }).then(response => {}).catch(error => {});\n  }\n\n  render() {\n    console.log(this.props.events);\n    console.log(this.state.accountId, this.state.adminType);\n    return React.createElement(Table, {\n      striped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Event Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Company Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Vendor Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Proposed Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Status\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Date Created\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Location\"), this.state.adminType == 2 ? React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Action\") : null)), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.props.events.map((event, index) => React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, index + 1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, event.eventName), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, event.companyId.username), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, event.vendorId.username), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, event.proposedDate.map((date, index) => React.createElement(\"p\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, new Date(date).toLocaleDateString()))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, event.status ? event.status : \"Pending\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, new Date(event.created_at).toLocaleDateString()), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, event.proposedLocation), this.state.adminType == 2 ? React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Button, {\n      id: \"PopView\",\n      color: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"View\"), React.createElement(UncontrolledPopover, {\n      placement: \"bottom\",\n      target: \"PopView\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(PopoverHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Approval\"), React.createElement(PopoverBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.actionApproval(true, event._id),\n      color: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Aprove\"), React.createElement(Input, {\n      type: \"select\",\n      onClick: val => {\n        this.setState({\n          confirmedDate: val.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"choose confirmed date\"), event.proposedDate.map((date, index) => React.createElement(\"option\", {\n      key: index,\n      value: date,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, new Date(date).toLocaleDateString()))), React.createElement(Button, {\n      onClick: this.actionApproval(false, event._id),\n      color: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Reject\")))) : null))), this.state.adminType == 2 ? React.createElement(Button, {\n      style: {\n        alignContent: \"center\"\n      },\n      color: \"success\",\n      onClick: () => {\n        window.location.href = '/event/create';\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Create New Event\") : null);\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  events: state.event.event\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setEventList: data => dispatch(actionGetEventList(data))\n});\n\nexport const Event = connect(mapStateToProps, mapDispatchToProps)(_Event);\nexport default Event;","map":{"version":3,"sources":["/home/akbar/Documents/eventBook/frontend/eventbooking/src/container/Event/index.js"],"names":["React","Component","connect","Button","Col","Form","Input","InputGroup","InputGroupAddon","InputGroupText","Row","Table","UncontrolledPopover","PopoverHeader","PopoverBody","jwtSimple","axios","API_SERVER","READ_EVENT","APPROVAL","toast","actionGetEventList","_Event","constructor","props","getAllEvent","bind","actionApproval","credential","decode","localStorage","getItem","state","adminType","accountId","_id","componentWillMount","get","headers","Authorization","then","response","result","data","error","setEventList","success","message","catch","status","eventId","post","render","console","log","events","map","event","index","eventName","companyId","username","vendorId","proposedDate","date","Date","toLocaleDateString","created_at","proposedLocation","val","setState","confirmedDate","target","value","alignContent","window","location","href","mapStateToProps","ownProps","mapDispatchToProps","dispatch","Event"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Col,\n  Form,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Row,\n  Table,\n  UncontrolledPopover,\n  PopoverHeader,\n  PopoverBody\n} from 'reactstrap';\nimport jwtSimple from 'jwt-simple'\nimport axios from 'axios';\nimport { API_SERVER, READ_EVENT, APPROVAL } from '../../api'\nimport { toast } from 'react-toastify';\nimport { actionGetEventList } from '../../actions'\n\nclass _Event extends Component {\n  constructor(props){\n    super(props)\n    this.getAllEvent = this.getAllEvent.bind(this)\n    this.actionApproval = this.actionApproval.bind(this)\n    this.credential = jwtSimple.decode(localStorage.getItem('token'), \"SECRET\")\n    this.state = {\n      adminType: this.credential.adminType, // toget admin type account vendor/hr admin\n      accountId: this.credential._id\n    }\n  }\n\n  componentWillMount(){\n    this.getAllEvent()\n  }\n\n  // toget all event by account type vendor/hr admin\n  getAllEvent(){\n    axios\n      .get(API_SERVER + READ_EVENT + `?adminType=${this.state.adminType}&accountId=${this.state.accountId}`, {\n        headers: {\n          Authorization: localStorage.getItem('token')\n        }\n      }).then(response => {\n        var result = response.data\n        if(!result.error) {\n          this.props.setEventList(result.data)\n          toast.success(result.message)\n        } else {\n          toast.error(result.message)\n        }\n      }).catch(error => {\n        toast.error(error)\n      })\n  }\n\n  actionApproval(status, eventId){\n    axios\n      .post(API_SERVER + APPROVAL, {\n        eventId: eventId,\n        status: status\n      }, {\n        headers: {\n          Authorization: localStorage.getItem('token')\n        }\n      }).then(response => {\n\n      }).catch(error => {\n\n      })\n  }\n\n\n\n  render(){\n    console.log(this.props.events)\n    console.log(this.state.accountId, this.state.adminType)\n    return(\n      <Table striped>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Event Name</th>\n          <th>Company Name</th>\n          <th>Vendor Name</th>\n          <th>Proposed Date</th>\n          <th>Status</th>\n          <th>Date Created</th>\n          <th>Location</th>\n          {\n            this.state.adminType == 2 ? (\n              <th>Action</th>\n            ) : (\n              null\n            )\n          }\n        </tr>\n      </thead>\n      <tbody>\n          {\n            this.props.events.map((event, index) => (\n              <tr key={index}>\n                <th scope=\"row\">{index + 1}</th>\n                <td>{event.eventName}</td>\n                <td>{event.companyId.username}</td>\n                <td>{event.vendorId.username}</td>\n                <td>\n                {\n                  event.proposedDate.map((date, index)=> (\n                    <p key={index}>{new Date(date).toLocaleDateString()}</p>\n                  ))\n                }\n                </td>\n                <td>{event.status ? event.status : \"Pending\"}</td>\n                <td>{new Date(event.created_at).toLocaleDateString()}</td>\n                <td>{event.proposedLocation}</td>\n                {\n                  this.state.adminType == 2 ? (\n                    <td>\n                      <Button id=\"PopView\" color=\"success\">View</Button>\n                      <UncontrolledPopover placement=\"bottom\" target=\"PopView\">\n                      <PopoverHeader>Approval</PopoverHeader>\n                        <PopoverBody>\n                          <Button onClick={this.actionApproval(true, event._id)} color=\"success\">Aprove</Button>\n                          <Input\n                            type=\"select\"\n                            onClick={val => {\n                              this.setState({\n                                confirmedDate: val.target.value\n                              })}\n                            }\n                          >\n                            <option value=\"\" disabled selected>choose confirmed date</option>\n                            {\n                              event.proposedDate.map((date, index) => (\n                                <option key={index} value={date}>{new Date(date).toLocaleDateString()}</option>\n                              ))\n                            }\n                          </Input>\n                          <Button onClick={this.actionApproval(false, event._id)} color=\"danger\">Reject</Button>\n                        </PopoverBody>\n                      </UncontrolledPopover>\n                    </td>\n                  ) : (\n                    null\n                  )\n                }\n              </tr>\n            ))\n          }\n          {/* <th scope=\"row\">1</th>\n          <td>Healthsys</td>\n          <td>Otto</td>\n          <td>02/09/2019</td>\n          <td>Pending</td>\n          <td>02/02/2019</td>\n          <td><Button color=\"success\">View</Button></td> */}\n      </tbody>\n      {\n        this.state.adminType == 2 ? (\n          <Button style={{\n            alignContent: \"center\"\n          }} color=\"success\" onClick={() => {\n            window.location.href = '/event/create'\n          }}>\n            Create New Event\n          </Button>\n        ) : (\n          null\n        )\n      }\n    </Table>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  events: state.event.event\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setEventList: data => dispatch(actionGetEventList(data))\n})\n\nexport const Event = connect(mapStateToProps, mapDispatchToProps)(_Event)\nexport default Event"]},"metadata":{},"sourceType":"module"}