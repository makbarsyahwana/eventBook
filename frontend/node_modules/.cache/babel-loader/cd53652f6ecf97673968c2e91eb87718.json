{"ast":null,"code":"var _jsxFileName = \"/home/akbar/Documents/eventBook/frontend/eventbooking/src/container/Event/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row, Table } from 'reactstrap';\nimport jwtSimple from 'jwt-simple';\nimport axios from 'axios';\nimport { API_SERVER, READ_EVENT } from '../../api';\nimport { toast } from 'react-toastify';\nimport { actionGetEventList } from '../../actions';\n\nclass _Event extends Component {\n  constructor(props) {\n    super(props);\n    this.getAllEvent = this.getAllEvent.bind(this);\n    this.credential = jwtSimple.decode(localStorage.getItem('token'), \"SECRET\");\n    this.state = {\n      adminType: this.credential.adminType,\n      // toget admin type account vendor/hr admin\n      accountId: this.credential._id\n    };\n  }\n\n  componentDidMount() {\n    this.getAllEvent();\n  } // toget all event by account type vendor/hr admin\n\n\n  getAllEvent() {\n    axios.get(API_SERVER + READ_EVENT + \"?adminType=\".concat(this.state.adminType, \"&accountId=\").concat(this.state.accountId), {\n      headers: {\n        Authorization: localStorage.getItem('token')\n      }\n    }).then(response => {\n      var result = response.data;\n\n      if (!result.error) {\n        this.props.setEventList(result.data);\n        toast.success(result.message);\n      } else {\n        toast.error(result.message);\n      }\n    }).catch(error => {\n      toast.error(error);\n    });\n  }\n\n  render() {\n    console.log(this.props.events);\n    console.log(this.state.accountId, this.state.adminType);\n    return React.createElement(Table, {\n      striped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Event Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Company Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Vendor Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Proposed Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Status\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Date Created\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Location\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Action\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.props.events.map((event, index) => React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, index + 1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, event.eventName), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, event.companyId.username), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, event.vendorId.username), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, event.proposedDate.map((date, index) => React.createElement(\"p\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, new Date(date).getUTCDate() + \"/\" + (new Date(date).getUTCMonth() + 1) + \"/\" + new Date(date).getUTCFullYear()))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, event.status ? event.status : \"Pending\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, Date(event.created_at).getUTCDate()), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, event.proposedLocation), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"View\"))))));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  events: state.event.event\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setEventList: data => dispatch(actionGetEventList(data))\n});\n\nexport const Event = connect(mapStateToProps, mapDispatchToProps)(_Event);\nexport default Event;","map":{"version":3,"sources":["/home/akbar/Documents/eventBook/frontend/eventbooking/src/container/Event/index.js"],"names":["React","Component","connect","Button","Col","Form","Input","InputGroup","InputGroupAddon","InputGroupText","Row","Table","jwtSimple","axios","API_SERVER","READ_EVENT","toast","actionGetEventList","_Event","constructor","props","getAllEvent","bind","credential","decode","localStorage","getItem","state","adminType","accountId","_id","componentDidMount","get","headers","Authorization","then","response","result","data","error","setEventList","success","message","catch","render","console","log","events","map","event","index","eventName","companyId","username","vendorId","proposedDate","date","Date","getUTCDate","getUTCMonth","getUTCFullYear","status","created_at","proposedLocation","mapStateToProps","ownProps","mapDispatchToProps","dispatch","Event"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Col,\n  Form,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Row,\n  Table\n} from 'reactstrap';\nimport jwtSimple from 'jwt-simple'\nimport axios from 'axios';\nimport { API_SERVER, READ_EVENT } from '../../api'\nimport { toast } from 'react-toastify';\nimport { actionGetEventList } from '../../actions'\n\nclass _Event extends Component {\n  constructor(props){\n    super(props)\n    this.getAllEvent = this.getAllEvent.bind(this)\n    this.credential = jwtSimple.decode(localStorage.getItem('token'), \"SECRET\")\n    this.state = {\n      adminType: this.credential.adminType, // toget admin type account vendor/hr admin\n      accountId: this.credential._id\n    }\n  }\n\n  componentDidMount(){\n    this.getAllEvent()\n  }\n\n  // toget all event by account type vendor/hr admin\n  getAllEvent(){\n    axios\n      .get(API_SERVER + READ_EVENT + `?adminType=${this.state.adminType}&accountId=${this.state.accountId}`, {\n        headers: {\n          Authorization: localStorage.getItem('token')\n        }\n      }).then(response => {\n        var result = response.data\n        if(!result.error) {\n          this.props.setEventList(result.data)\n          toast.success(result.message)\n        } else {\n          toast.error(result.message)\n        }\n      }).catch(error => {\n        toast.error(error)\n      })\n  }\n\n\n\n  render(){\n    console.log(this.props.events)\n    console.log(this.state.accountId, this.state.adminType)\n    return(\n      <Table striped>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Event Name</th>\n          <th>Company Name</th>\n          <th>Vendor Name</th>\n          <th>Proposed Date</th>\n          <th>Status</th>\n          <th>Date Created</th>\n          <th>Location</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n          {\n            this.props.events.map((event, index) => (\n              <tr key={index}>\n                <th scope=\"row\">{index + 1}</th>\n                <td>{event.eventName}</td>\n                <td>{event.companyId.username}</td>\n                <td>{event.vendorId.username}</td>\n                <td>\n                {\n                  event.proposedDate.map((date, index)=> (\n                    <p key={index}>{new Date(date).getUTCDate() + \"/\" + (new Date(date).getUTCMonth() + 1) + \"/\" + new Date(date).getUTCFullYear()}</p>\n                  ))\n                }\n                </td>\n                <td>{event.status ? event.status : \"Pending\"}</td>\n                <td>{Date(event.created_at).getUTCDate()}</td>\n                <td>{event.proposedLocation}</td>\n                <td><Button color=\"success\">View</Button></td>\n              </tr>\n            ))\n          }\n          {/* <th scope=\"row\">1</th>\n          <td>Healthsys</td>\n          <td>Otto</td>\n          <td>02/09/2019</td>\n          <td>Pending</td>\n          <td>02/02/2019</td>\n          <td><Button color=\"success\">View</Button></td> */}\n      </tbody>\n    </Table>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  events: state.event.event\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setEventList: data => dispatch(actionGetEventList(data))\n})\n\nexport const Event = connect(mapStateToProps, mapDispatchToProps)(_Event)\nexport default Event"]},"metadata":{},"sourceType":"module"}