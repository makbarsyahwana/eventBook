{"ast":null,"code":"var _jsxFileName = \"/home/akbar/Documents/eventBook/frontend/src/container/Event/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Col, Form, Input, InputGroup, InputGroupAddon, InputGroupText, Row, Table, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap';\nimport jwtSimple from 'jwt-simple';\nimport axios from 'axios';\nimport { API_SERVER, READ_EVENT, APPROVAL } from '../../api';\nimport { toast } from 'react-toastify';\nimport { actionGetEventList } from '../../actions';\n\nclass _Event extends Component {\n  constructor(props) {\n    super(props);\n    this.getAllEvent = this.getAllEvent.bind(this);\n    this.actionApproval = this.actionApproval.bind(this);\n    this.credential = jwtSimple.decode(localStorage.getItem('token'), \"SECRET\");\n    this.state = {\n      adminType: this.credential.adminType,\n      // toget admin type account vendor/hr admin\n      accountId: this.credential._id,\n      confirmedDate: '',\n      reason: '',\n      status: ''\n    };\n  }\n\n  componentWillMount() {\n    this.getAllEvent();\n  } // toget all event by account type vendor/hr admin\n\n\n  getAllEvent() {\n    axios.get(API_SERVER + READ_EVENT + \"?adminType=\".concat(this.state.adminType, \"&accountId=\").concat(this.state.accountId), {\n      headers: {\n        Authorization: localStorage.getItem('token')\n      }\n    }).then(response => {\n      var result = response.data;\n\n      if (!result.error) {\n        this.props.setEventList(result.data);\n        toast.success(result.message);\n      } else {\n        toast.error(result.message);\n      }\n    }).catch(error => {\n      toast.error(error);\n    });\n  }\n\n  actionApproval(status, eventId) {\n    axios.post(API_SERVER + APPROVAL, {\n      eventId: eventId,\n      status: status,\n      confirmedDate: this.state.confirmedDate,\n      reason: this.state.reason\n    }, {\n      headers: {\n        Authorization: localStorage.getItem('token')\n      }\n    }).then(response => {\n      var result = response.data;\n\n      if (!result.error) {\n        toast.success(result.message);\n        this.setState({\n          confirmedDate: '',\n          reason: '',\n          status: status\n        });\n        this.getAllEvent();\n      } else {\n        toast.error(result.message);\n      }\n    }).catch(error => {\n      toast.error(error);\n    });\n  }\n\n  render() {\n    console.log(this.props.events);\n    console.log(this.state.accountId, this.state.adminType);\n    return React.createElement(Table, {\n      striped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Event Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Company Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Vendor Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Proposed Date\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.status === \"Approved\" ? \"Confirmed Date\" : \"Reason\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Status\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Date Created\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Location\"), this.state.adminType == 2 ? React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Action\") : null)), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.props.events.map((event, index) => React.createElement(\"tr\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, index + 1), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, event.eventName), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, event.companyId.username), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, event.vendorId.username), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, event.proposedDate.map((date, index) => React.createElement(\"p\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, new Date(date).toLocaleDateString()))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, event.status === \"Approved\" ? new Date(event.confirmedDate).toLocaleDateString() : event.reason), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, event.status ? event.status : \"Pending\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, new Date(event.created_at).toLocaleDateString()), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, event.proposedLocation), this.state.adminType == 2 ? React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Button, {\n      id: \"PopView\".concat(index),\n      color: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"View\"), React.createElement(UncontrolledPopover, {\n      placement: \"bottom\",\n      target: \"PopView\".concat(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(PopoverHeader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Approval\"), React.createElement(PopoverBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Input, {\n      type: \"select\",\n      onClick: val => {\n        this.setState({\n          confirmedDate: val.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Choose confirmed date\"), event.proposedDate.map((date, index) => React.createElement(\"option\", {\n      key: index,\n      value: date,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, new Date(date).toLocaleDateString()))), React.createElement(Button, {\n      onClick: () => this.actionApproval(\"Approved\", event._id),\n      color: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Aprove\"), React.createElement(Input, {\n      type: \"text\",\n      placeholder: \"Reason for reject\",\n      value: this.state.reason,\n      onChange: val => {\n        this.setState({\n          reason: val.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: () => this.actionApproval(\"Rejected\", event._id),\n      color: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Reject\")))) : null))), this.state.adminType == 1 ? React.createElement(Button, {\n      style: {\n        alignContent: \"center\"\n      },\n      color: \"success\",\n      onClick: () => {\n        window.location.href = '/event/create';\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Create New Event\") : null, React.createElement(Button, {\n      color: \"danger\",\n      onClick: () => {\n        localStorage.removeItem('token');\n        window.location.href = '/';\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Logout\"));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  events: state.event.event\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setEventList: data => dispatch(actionGetEventList(data))\n});\n\nexport const Event = connect(mapStateToProps, mapDispatchToProps)(_Event);\nexport default Event;","map":{"version":3,"sources":["/home/akbar/Documents/eventBook/frontend/src/container/Event/index.js"],"names":["React","Component","connect","Button","Col","Form","Input","InputGroup","InputGroupAddon","InputGroupText","Row","Table","UncontrolledPopover","PopoverHeader","PopoverBody","jwtSimple","axios","API_SERVER","READ_EVENT","APPROVAL","toast","actionGetEventList","_Event","constructor","props","getAllEvent","bind","actionApproval","credential","decode","localStorage","getItem","state","adminType","accountId","_id","confirmedDate","reason","status","componentWillMount","get","headers","Authorization","then","response","result","data","error","setEventList","success","message","catch","eventId","post","setState","render","console","log","events","map","event","index","eventName","companyId","username","vendorId","proposedDate","date","Date","toLocaleDateString","created_at","proposedLocation","val","target","value","alignContent","window","location","href","removeItem","mapStateToProps","ownProps","mapDispatchToProps","dispatch","Event"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Col,\n  Form,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Row,\n  Table,\n  UncontrolledPopover,\n  PopoverHeader,\n  PopoverBody\n} from 'reactstrap';\nimport jwtSimple from 'jwt-simple'\nimport axios from 'axios';\nimport { API_SERVER, READ_EVENT, APPROVAL } from '../../api'\nimport { toast } from 'react-toastify';\nimport { actionGetEventList } from '../../actions'\n\nclass _Event extends Component {\n  constructor(props){\n    super(props)\n    this.getAllEvent = this.getAllEvent.bind(this)\n    this.actionApproval = this.actionApproval.bind(this)\n    this.credential = jwtSimple.decode(localStorage.getItem('token'), \"SECRET\")\n    this.state = {\n      adminType: this.credential.adminType, // toget admin type account vendor/hr admin\n      accountId: this.credential._id,\n      confirmedDate: '',\n      reason: '',\n      status: ''\n    }\n  }\n\n  componentWillMount(){\n    this.getAllEvent()\n  }\n\n  // toget all event by account type vendor/hr admin\n  getAllEvent(){\n    axios\n      .get(API_SERVER + READ_EVENT + `?adminType=${this.state.adminType}&accountId=${this.state.accountId}`, {\n        headers: {\n          Authorization: localStorage.getItem('token')\n        }\n      }).then(response => {\n        var result = response.data\n        if(!result.error) {\n          this.props.setEventList(result.data)\n          toast.success(result.message)\n        } else {\n          toast.error(result.message)\n        }\n      }).catch(error => {\n        toast.error(error)\n      })\n  }\n\n  actionApproval(status, eventId){\n    axios\n      .post(API_SERVER + APPROVAL, {\n        eventId: eventId,\n        status: status,\n        confirmedDate: this.state.confirmedDate,\n        reason: this.state.reason\n      }, {\n        headers: {\n          Authorization: localStorage.getItem('token')\n        }\n      }).then(response => {\n        var result = response.data\n        if(!result.error){\n          toast.success(result.message)\n          this.setState({\n            confirmedDate: '',\n            reason: '',\n            status: status\n          })\n          this.getAllEvent()\n        } else {\n          toast.error(result.message)\n        }\n      }).catch(error => {\n        toast.error(error)\n      })\n  }\n\n\n\n  render(){\n    console.log(this.props.events)\n    console.log(this.state.accountId, this.state.adminType)\n    return(\n      <Table striped>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Event Name</th>\n          <th>Company Name</th>\n          <th>Vendor Name</th>\n          <th>Proposed Date</th>\n          <th>{this.state.status === \"Approved\" ? \"Confirmed Date\" : \"Reason\"}</th>\n          <th>Status</th>\n          <th>Date Created</th>\n          <th>Location</th>\n          {\n            this.state.adminType == 2 ? (\n              <th>Action</th>\n            ) : (\n              null\n            )\n          }\n        </tr>\n      </thead>\n      <tbody>\n          {\n            this.props.events.map((event, index) => (\n              <tr key={index}>\n                <th scope=\"row\">{index + 1}</th>\n                <td>{event.eventName}</td>\n                <td>{event.companyId.username}</td>\n                <td>{event.vendorId.username}</td>\n                <td>\n                {\n                  event.proposedDate.map((date, index)=> (\n                    <p key={index}>{new Date(date).toLocaleDateString()}</p>\n                  ))\n                }\n                </td>\n                <td>{event.status === \"Approved\" ? new Date(event.confirmedDate).toLocaleDateString() : event.reason}</td>\n                <td>{event.status ? event.status : \"Pending\"}</td>\n                <td>{new Date(event.created_at).toLocaleDateString()}</td>\n                <td>{event.proposedLocation}</td>\n                {\n                  this.state.adminType == 2 ? (\n                    <td>\n                      <Button id={`PopView${index}`} color=\"success\">View</Button>\n                      <UncontrolledPopover placement=\"bottom\" target={`PopView${index}`}>\n                      <PopoverHeader>Approval</PopoverHeader>\n                        <PopoverBody>\n                          <Input\n                            type=\"select\"\n                            onClick={val => {\n                              this.setState({\n                                confirmedDate: val.target.value\n                              })}\n                            }\n                          >\n                            <option value=\"\" disabled selected>Choose confirmed date</option>\n                            {\n                              event.proposedDate.map((date, index) => (\n                                <option key={index} value={date}>{new Date(date).toLocaleDateString()}</option>\n                              ))\n                            }\n                          </Input>\n                          <Button onClick={() => this.actionApproval(\"Approved\", event._id)} color=\"success\">Aprove</Button>\n                          <Input\n                            type=\"text\"\n                            placeholder=\"Reason for reject\"\n                            value ={this.state.reason}\n                            onChange={val => {\n                              this.setState({\n                                reason: val.target.value\n                              })}\n                            }\n                          />\n                          <Button onClick={() => this.actionApproval(\"Rejected\", event._id)} color=\"danger\">Reject</Button>\n                        </PopoverBody>\n                      </UncontrolledPopover>\n                    </td>\n                  ) : (\n                    null\n                  )\n                }\n              </tr>\n            ))\n          }\n          {/* <th scope=\"row\">1</th>\n          <td>Healthsys</td>\n          <td>Otto</td>\n          <td>02/09/2019</td>\n          <td>Pending</td>\n          <td>02/02/2019</td>\n          <td><Button color=\"success\">View</Button></td> */}\n      </tbody>\n      {\n        this.state.adminType == 1 ? (\n          <Button style={{\n            alignContent: \"center\"\n          }} color=\"success\" onClick={() => {\n            window.location.href = '/event/create'\n          }}>\n            Create New Event\n          </Button>\n        ) : (\n          null\n        )\n      }\n      <Button\n        color=\"danger\"\n        onClick={() => {\n          localStorage.removeItem('token')\n          window.location.href = '/'\n        }}\n      >\n        Logout\n      </Button>\n    </Table>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n  events: state.event.event\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setEventList: data => dispatch(actionGetEventList(data))\n})\n\nexport const Event = connect(mapStateToProps, mapDispatchToProps)(_Event)\nexport default Event"]},"metadata":{},"sourceType":"module"}